import React, { useState, useEffect } from 'react';
import Navbar from "react-bootstrap/Navbar";
import { Container, Nav, Card, Spinner, Form, Button } from "react-bootstrap";
import {useParams, useNavigate, useLocation} from "react-router-dom";
import './Board.css';
import {responsivePropType} from "react-bootstrap/createUtilityClasses"; // Ï∂îÍ∞ÄÎêú Ïä§ÌÉÄÏùº ÏãúÌä∏

const View = () => {
    const { id } = useParams();
    const location = useLocation(); // useLocation ÌõÖÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ location Í∞ùÏ≤¥ Í∞ÄÏ†∏Ïò§Í∏∞
    const queryParams = new URLSearchParams(location.search);
    const memberId = queryParams.get('memberId'); // ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞ÏóêÏÑú memberId Í∞ÄÏ†∏Ïò§Í∏∞
    const [role, setRole] = useState("");
    const [boardData, setBoardData] = useState(null);
    const [error, setError] = useState(null);
    const [loading, setLoading] = useState(true); // Î°úÎî© ÏÉÅÌÉú
    const [comments, setComments] = useState(null);
    const navigate = useNavigate();
    const [userData, setUserData] = useState(null);
    const [newComment, setNewComment] = useState("")
    //Ìï¥Îãπ Í≤åÏãúÍ∏Ä Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Îäî Î©îÏÜåÎìú
    useEffect(() => {
        fetch(`http://localhost:8080/board/${id}`)
            .then(res => {
                if (!res.ok) {
                    throw new Error('Network response was not ok');
                }
                return res.json();
            })
            .then(data => {
                const updateData = {...data, view: data.view+1};
                setBoardData(updateData);
                // ÏÑúÎ≤ÑÏóê Ï°∞ÌöåÏàò ÏóÖÎç∞Ïù¥Ìä∏
                return fetch(`http://localhost:8080/viewCount/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });
            })
            .then(res => {
                if (!res.ok) {
                    throw new Error('Network response was not ok');
                }
                setLoading(false); // Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î°úÎìúÎêòÎ©¥ Î°úÎî© ÏÉÅÌÉúÎ•º falseÎ°ú ÏÑ§Ï†ï
            })
            .catch(error => {
                setError(error.message);
                setLoading(false); // Ïò§Î•ò Î∞úÏÉù Ïãú Î°úÎî© ÏÉÅÌÉúÎ•º falseÎ°ú ÏÑ§Ï†ï
            });
    }, [id]);
    // Ïú†Ï†Ä Í∂åÌïú Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§Îäî Î©îÏÜåÎìú
    useEffect(() => {
        fetch(`http://localhost:8080/memberInfo/${memberId}`)
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => { throw new Error(text); });
                }
                return response.json();
            })
            .then(data => {
                setUserData(data);
                setRole(data.role); // Î©§Î≤Ñ Í∞ùÏ≤¥ÏóêÏÑú Ïó≠Ìï† Ï†ïÎ≥¥ ÏÑ§Ï†ï
            })
            .catch(error => {
                setError(error.message);
                alert(error.message); // Ïò§Î•ò Î©îÏãúÏßÄÎ•º ÏïåÎ¶ºÏúºÎ°ú ÌëúÏãú
            });
    }, [id]);
    // ÎåìÍ∏Ä ÏóÖÎ°úÎìú api ÏöîÏ≤≠ÌïòÎäî Î©îÏÜåÎìú
    const handleCommentSubmit = (e) => {
        e.preventDefault();
        if (!userData) {
            alert('Ïú†Ï†Ä Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§Îäî Ï§ëÏûÖÎãàÎã§. Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî.');
            return;
        }
        const postData = {
            postId: id,
            nickname: userData.nickname,
            createdAt: new Date().toISOString(),
            content: newComment,
        };
        // ÏÑúÎ≤ÑÏóê ÏÉà ÎåìÍ∏ÄÏùÑ Í≤åÏãúÌï©ÎãàÎã§
        fetch(`http://localhost:8080/postComment`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify( postData ),
        })
            .then((response) => {
                if (response.status === 201 || response.status ===200) {
                    return response.text(); // JSON ÎåÄÏã† ÌÖçÏä§Ìä∏Î°ú ÏùëÎãµ Ï≤òÎ¶¨
                } else {
                    return response.text().then(text => Promise.reject(text || 'ÎåìÍ∏Ä ÏóÖÎ°úÎìúÏóê Ïã§Ìå®ÌïòÏòÄÏäµÎãàÎã§.'));
                }
            })
            .then((data) => {
                console.log(data);
                setNewComment(""); // ÎåìÍ∏Ä ÏûÖÎ†• ÌïÑÎìú Ï¥àÍ∏∞Ìôî
                navigate(`/ViewPost/${id}?memberId=${memberId}`);
            })
            .catch((error) => {
                console.error('Error:', error);
                alert(error);
            });
    };
    // ÎåìÍ∏Ä Í∞ÄÏ†∏Ïò§Îäî Î©îÏÜåÎìú
    useEffect(() => {
        fetch(`http://localhost:8080/getComment/${id}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                setComments(data);
            })
            .catch(error => {
                console.error('Error fetching comments:', error);
                setComments([]); // Ïò§Î•òÍ∞Ä Î∞úÏÉùÌï¥ÎèÑ Îπà Î∞∞Ïó¥Î°ú ÏÑ§Ï†ïÌïòÏó¨ Ï≤òÎ¶¨
            });
    }, [id,comments]);
    // ÏàòÏ†ï ÏöîÏ≤≠ÌïòÎäî Î©îÏÜåÎìú
    const handleEdit = () => {
        // ÏàòÏ†ï Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú ÎèôÏûë
        navigate(`/Post/${memberId}?postId=${id}`);
    };
    //ÏÇ≠Ï†ú ÏöîÏ≤≠ÌïòÎäî Î©îÏÜåÎìú
    const handleDelete = () => {
        // ÏÇ≠Ï†ú Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú ÎèôÏûë
        if (window.confirm("Ï†ïÎßêÎ°ú Ïù¥ Í≤åÏãúÍ∏ÄÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?")) {
            fetch(`http://localhost:8080/delete/${id}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json; charset=utf-8',
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.text();
                })
                .then(() => {
                    alert("Í≤åÏãúÍ∏ÄÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.");
                    navigate(`/Board/${memberId}`);
                })
                .catch(error => setError(error.message));
        }
    };

    return (
        <>
            <Navbar bg="dark" variant="dark">
                <Container>
                    <Navbar.Brand href={`/Home/${memberId}`}>KW Í±∞ÎûòÏÜåüìâ</Navbar.Brand>
                    <Nav className="ml-auto">
                        <Nav.Link href={`/Home/${memberId}`}>Ìôà ÌôîÎ©¥</Nav.Link>
                        <Nav.Link href={`/Trading/${memberId}`}>Ï£ºÏãù Íµ¨Îß§</Nav.Link>
                        <Nav.Link href={`/Board/${memberId}`}>Ïª§ÎÆ§ÎãàÌã∞</Nav.Link>
                        <Nav.Link href={`/MyInfo/${memberId}`}>ÎÇ¥ Ï†ïÎ≥¥</Nav.Link>
                        <Nav.Link href={`/Post/${memberId}`}>Í≤åÏãúÍ∏Ä ÏûëÏÑ±</Nav.Link>
                    </Nav>
                </Container>
            </Navbar>
            <br />

            <div className="centered-container">
                {loading ? (
                    <Spinner animation="border" role="status">
                        <span className="visually-hidden">Loading...</span>
                    </Spinner>
                ) : error ? (
                    <div className="alert alert-danger">{error}</div>
                ) : (
                    <Card className="mb-4 shadow-sm card-custom">
                        <Card.Header>
                            <div className="d-flex justify-content-between align-items-center">
                                <div>
                                    ‚úçÔ∏è{boardData.nickname} <span
                                    style={{fontSize: '0.8em', color: 'gray'}}>
                                                        üëÅÔ∏è{boardData.view}
                                    </span>
                                </div>
                                <div>
                                    {boardData.member.id === parseInt(memberId) && (
                                        <>
                                            <Button variant="outline-primary" size="sm" className="me-2" onClick={handleEdit}>
                                                ÏàòÏ†ï
                                            </Button>
                                            <Button variant="outline-danger" size="sm" onClick={handleDelete}>
                                                ÏÇ≠Ï†ú
                                            </Button>
                                        </>
                                    )}
                                </div>
                            </div>
                        </Card.Header>
                        <Card.Body>
                            <blockquote className="blockquote mb-0">
                                <strong>{boardData.title}</strong>
                                <br/>
                                <br/>
                                <span style={{fontSize: '0.8em'}}>{boardData.content}</span>
                            </blockquote>
                        </Card.Body>
                            <Form onSubmit={handleCommentSubmit}>
                                <Form.Group controlId="comment">
                                    <Form.Control
                                        type="text"
                                        placeholder="ÎåìÍ∏ÄÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî"
                                        value={newComment}
                                        onChange={(e) => setNewComment(e.target.value)}
                                        className="mb-2"
                                    />
                                </Form.Group>
                                <Button type="submit" variant="primary">ÏÑ†Ìîå Îã¨Í∏∞</Button>
                            </Form>
                                <div className="scrollable-card">
                                {comments.map((comment, index) => (
                                    <div key={index} >
                                        <strong>üôã{comment.nickname}</strong> <span
                                        style={{fontSize: '0.8em', color: 'gray', marginLeft: '10px'}}>
                                                        {new Date(comment.createdAt).toLocaleString()}
                                                    </span>
                                        <p className="mb-1">{comment.content}</p>
                                        <br/>
                                    </div>
                                ))}
                                </div>
                    </Card>
                )}
            </div>
        </>
    );
}

export default View;
